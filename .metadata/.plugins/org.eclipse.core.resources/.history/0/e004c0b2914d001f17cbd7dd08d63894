package Sreaming;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import StreamModels.Account;

public class AccountTest {
public static void main(String[] args) {
	 List<Account> accounts = new ArrayList<>();
	 
	 accounts.add(new Account(12345, "Janhavi", 1000.00));
     accounts.add(new Account(54321, "Sarthak", 500.00));
     accounts.add(new Account(67890, "Vedika", 2000.00));
     accounts.add(new Account(364839, "Deep", 10000.00));
     
     
    Optional<Account> minBalanceAccount = accounts.stream()
     .reduce(
    	        (account1, account2) -> account1.getBalance() < account2.getBalance() ? account1 : account2
    	    );

//     Optional<Account> maxbalance=accounts.stream().max((balance1,balance2)->balance1-balance2);
//		if(maxbalance.isPresent())
//			System.out.println("Max value is :"+maxbalance.get());
		
		  List<String> longNames = accounts.stream()
		            .filter(account -> account.getName().length() > 6)
		            .map(Account::getName)
		            .collect(Collectors.toList());

		        longNames.forEach(System.out::println);
}
}
